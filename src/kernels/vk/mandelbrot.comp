#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) buffer ResultsOut	{	float results[];	};

layout (push_constant) uniform PushConstants {
	uint width; uint height;
   float fromX; float fromY;
   float sizeX; float sizeY;
	uint iters; uint isSmoothing;
} params;

layout (local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;
void main()
{
	const uint i = gl_GlobalInvocationID.x;
	const uint j = gl_GlobalInvocationID.y;

    const float threshold = 256.0f;
    const float threshold2 = threshold * threshold;

	uint width = params.width; uint height = params.height;
   float fromX = params.fromX; float fromY = params.fromY;
   float sizeX = params.sizeX; float sizeY = params.sizeY;
	uint iters = params.iters; uint isSmoothing = params.isSmoothing;

    if (i >= width || j >= height)
        return;

    float x0 = fromX + (i + 0.5f) * sizeX / width;
    float y0 = fromY + (j + 0.5f) * sizeY / height;

    float x = x0;
    float y = y0;

    int iter = 0;
    for (; iter < iters; ++iter) {
        float xPrev = x;
        x = x * x - y * y + x0;
        y = 2.0f * xPrev * y + y0;
        if ((x * x + y * y) > threshold2) {
            break;
        }
    }
    float result = iter;
    if (isSmoothing > 0 && iter != iters) {
        result = result - log(log(sqrt(x * x + y * y)) / log(threshold)) / log(2.0f);
    }

    result = 1.0f * result / iters;
    results[j * width + i] = result;
}
