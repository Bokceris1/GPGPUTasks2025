#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) readonly buffer AsIn  { uint a[];   };
layout (std430, binding = 1)          buffer SumIO { uint sum[]; };

layout (push_constant) uniform PushConstants {
    uint n;
} params;

layout (local_size_x = GROUP_SIZE) in;

shared uint local_data[GROUP_SIZE];

void main()
{
    const uint index       = gl_GlobalInvocationID.x;
    const uint local_index = gl_LocalInvocationID.x;

    if (index < params.n / LOAD_K_VALUES_PER_ITEM) {
        uint my_sum = 0;
        for (uint i = 0; i < LOAD_K_VALUES_PER_ITEM; ++i) {
            my_sum += a[i * (params.n / LOAD_K_VALUES_PER_ITEM) + index];
        }
        local_data[local_index] = my_sum;
    } else {
        local_data[local_index] = 0;
    }

    memoryBarrierShared();
    barrier();

    if (local_index == 0) {
        uint master_sum = 0;
        for (uint i = 0; i < GROUP_SIZE; ++i) {
            master_sum += local_data[i];
        }
        atomicAdd(sum[0], master_sum);
    }
}
